__NUXT_JSONP__("/thoughts/thinking-in-design-code", {data:[{page:{title:"Thinking in design-code",content:"\u003Cp\u003EI&rsquo;ve said before that I&rsquo;ve built this personal site three times so far, and in all three cases it was without any design file in site. Now, as a designer this might seem like a really weird approach to building out something that requires\r\ndesign, but I designed it in code. Hear me out.\u003C\u002Fp\u003E\u003Cp\u003EIf you&rsquo;ve read any of my other Thoughts before then you&rsquo;ll be familiar with my concept of \u003Ca href=\"https:\u002F\u002Fwww.kejk.tech\u002Fthoughts\u002Fcode-as-design\"\u003ECode as Design\u003C\u002Fa\u003E but for this piece I want to take it a little bit further.\u003C\u002Fp\u003E\u003Ch3\u003EThe premise\u003C\u002Fh3\u003E\u003Cp\u003ESo to understand why I took this approach&mdash;and for those who haven&rsquo;t read my previous articles&mdash;you&rsquo;ll need to know that I am a designer but I&rsquo;ve had a varied background that grew from learning the basics of HTML and CSS in\r\nthe early 2000&rsquo;s. So really, I actually learnt the principles of web design through the lens of code.\u003C\u002Fp\u003E\u003Cp\u003ESo below I&rsquo;m going to outline some practical steps of how to relate code and design. This list won&rsquo;t be exhaustive or complete necessarily (although I may come back and add to it) but it should match pretty well.\u003C\u002Fp\u003E\u003Cp\u003ESome caveats:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003EAll references to design tools will be through the use of Figma&rsquo;s terminology. This is for three reasons:\u003Col\u003E\u003Cli\u003EIt&rsquo;s a pretty ubiquitous design tool now, used by many\u003C\u002Fli\u003E\u003Cli\u003EIt&rsquo;s what I use day to day for my job, so I know it very well\u003C\u002Fli\u003E\u003Cli\u003EMost of Figma&rsquo;s terminology for tools map fairly synonymously with code (particularly the new flex box-inspired auto layout\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003C\u002Fli\u003E\u003Cli\u003EThis is how I think of code and design being linked, it doesn&rsquo;t mean that it&rsquo;s the only way to think about it\u003C\u002Fli\u003E\u003Cli\u003EI&rsquo;ll do my best to explain any concepts in as much detail as I can, but I can&rsquo;t promise it&rsquo;s exact\u003C\u002Fli\u003E\u003Cli\u003EThis entire piece revolves around the principle of a web project build, you can of course map these same ideas to mobile builds in SwiftUI for example, the exact names will vary slightly (a div for example is more likely to be an Stack or even a Struct\r\ndepending on how you build your projects, and grids are called LazyVGrid\u002FLazyHGrid respectively)\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch3\u003EProjects == Folders\u003C\u002Fh3\u003E\u003Cp\u003EWhere better to start than projects. In Figma, a &ldquo;Project&rdquo; is a folder that contains a series of files that you work on. You can have one, several or many. In Code, we use folders (just a regular old computer folder) and inside those folders\r\nwe keep files which contain our code. Like with a Figma project, a folder can contain one, several or many files.\u003C\u002Fp\u003E\u003Cp\u003EIf you work in modern Javascript-based frameworks, you&rsquo;ll likely have a whole bunch of files. If you&rsquo;re just keeping it minimal you may only use a single HTML file.\u003C\u002Fp\u003E\u003Ch3\u003EFiles == Files\u003C\u002Fh3\u003E\u003Cp\u003EWell this ones easier right? Each Figma file inside your project is essentially synonymous with the file structure of a development project. You can create multiple files within a project and link them all together with Figma&rsquo;s Shared Libraries feature.\u003C\u002Fp\u003E\u003Cp\u003EFor most development projects, especially those that utilise one of the Javascript frameworks, there will be a bunch of files that all play together nicely (hopefully) to build your site. Figma projects are no different if you take full advantage of the\r\nShared Libraries in Figma (and you should). Decentralising files is a key fundamental in modern development and allows for greater reusability and manageability of your code. Thinking of design files like this too will not only make your files more manageable\r\nbut will also create a wider synergy to your development project when it progresses.\u003C\u002Fp\u003E\u003Ch3\u003EFrames == Divs\u003C\u002Fh3\u003E\u003Cp\u003EFrames in Figma are your canvases. Frames are where you &ldquo;paint&rdquo; the interface of the product or thing you&rsquo;re designing, and in development the notion of &ldquo;painting&rdquo; is true too.\u003C\u002Fp\u003E\u003Cblockquote\u003E\u003Cp\u003ESidenote: You may see the phrase &ldquo;Time to first paint&rdquo; if you ever do a Google Lighthouse review of your site, this is Google telling you the time it takes for your site to load the initial interface and allow first interaction. If it&rsquo;s\r\nslow, you&rsquo;ll score low for SEO and with Javascript-based Single Page Apps this can be a problem, so keep an eye on it.\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\u003Cp\u003EJust like in Figma, Divs act as a container for your code and you can stack as many Divs inside each other as you need (just like Frames). By doing this, you build up a structure for your page. This is where it can start to take life. It&rsquo;s important\r\nto stay focused on building out the core Div structure before getting into the details. Use quick &ldquo;styles&rdquo; on your Divs to create visual separation&mdash;even if it looks garish&mdash;such as `class=&ldquo;border-2 border-black bg-red-500&rdquo;.\r\nI&rsquo;d use primary colours to separate the independent elements and stop you from nitpicking the details.\u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgist.github.com\u002Fkemiljk\u002F67631887f63e7b3b047364ef5df764f4\" rel=\"noopener noreferrer\" target=\"_blank\"\u003EThis Gist\u003C\u002Fa\u003E is an example of building up the basic structure of my home page container utilising the TailwindCSS library.\u003C\u002Fp\u003E\u003Ch3\u003EAuto Layout == Flexbox and Grid\u003C\u002Fh3\u003E\u003Cp\u003EIn the above code you&rsquo;ll see some examples of &lsquo;flex&rsquo;, &lsquo;flex-row&rsquo; and &lsquo;grid&rsquo;. These are all layout mechanisms that help to structure the page content in a more fluid and dynamic way. They&rsquo;re particularly important for when you want to create responsive layouts, such as having a 1 x 4 grid turn from a single row into a single column between desktop and mobile. This is exactly what happens in that first grid line \u003Ccode class=\"  language-html\"\u003E\u003Cspan class=\"token tag\"\u003E\u003Cspan class=\"token tag\"\u003E\u003Cspan class=\"token punctuation\"\u003E&lt;\u003C\u002Fspan\u003Ediv\u003C\u002Fspan\u003E \u003Cspan class=\"token attr-name\"\u003Eclass\u003C\u002Fspan\u003E\u003Cspan class=\"token attr-value\"\u003E\u003Cspan class=\"token punctuation\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&quot;\u003C\u002Fspan\u003Egrid xs:grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4\u003Cspan class=\"token punctuation\"\u003E&quot;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E.\r\nAt the smallest breakpoint (phone) it&rsquo;s a single column, at the next breakpoint (tablet portrait) it&rsquo;s two, and then at the next and up (tablet landscape or desktop) it turns into a four-column row. At each stage I implement a 4-point gap\r\nto separate the elements.\u003C\u002Fp\u003E\u003Cp\u003EIf you look at the new Figma Auto Layout and Constraints controls, you&rsquo;ll see a lot of familiarity with these flex principles too.\u003C\u002Fp\u003E\u003Cfigure\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fkejk\u002Fimage\u002Fupload\u002Fv1608155456\u002F7BDEFC0F-89CB-4CA5-B93C-1B2A55646CEE_ewz2ye.jpg\" alt=\"An image of the Flexbox-like layout\" class=\"w-screen md:max-w-xl rounded-lg fr-fic fr-dii\"\u003E\u003Cfigcaption\u003EAn image of the Flexbox-like layout\u003Cbr\u003E\u003Cbr\u003E\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp\u003EIn the above we can see the flex direction (the down and right arrow) the spacing between elements (in grid, this is the grid-space-row or grid-space-col or in TailwindCSS, gap-{n}), the overall padding (here it&rsquo;s 16px on every side) and the alignment\r\n(in our example this is align-center, justify-center).\u003C\u002Fp\u003E\u003Cp\u003EYou can also set resizing constraints. This defines how the object behaves when resized. We can choose between &ldquo;Hug contents&rdquo;&mdash;where the frame itself (i.e. the Div) is perfectly connected to the width of the objects inside and maintains\r\nthe padding and wrapping&mdash;or &ldquo;Fixed width&rdquo; where the the frame width never changes regardless of changes to the internal components. The same rules can be applied to the height property.\u003C\u002Fp\u003E\u003Cp\u003EBelow is how this looks in practice. Hug Contents is above and Fixed Width below. Notice that because I have the align-center and justify-center properties in place, the objects stay perfectly in the middle with fixed width.\u003C\u002Fp\u003E\u003Cfigure\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fkejk\u002Fimage\u002Fupload\u002Fv1608155455\u002FF93AD77E-441A-458B-9D80-039C5B97F194_o9tw8w.png\" alt=\"Image example of the different container options on Figma\" class=\"w-screen md:max-w-xl rounded-lg fr-fic fr-dii\"\u003E\u003Cfigcaption\u003EImage example of the different container options on Figma\u003Cbr\u003E\u003Cbr\u003E\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Ch3\u003ELayer naming == ID or Class\u003C\u002Fh3\u003E\u003Cp\u003ENow let&rsquo;s talk about layers and naming. I know, I know, it&rsquo;s totally boring and it&rsquo;s fine to have &lsquo;Rectangle 33201&rsquo; or &lsquo;Frame 1000010&rsquo; on your projects if the actual designs look cool. I&rsquo;ve done it many\r\ntimes too. But there is a really valid reason to think more carefully about layer naming, implementation in code.\u003C\u002Fp\u003E\u003Cp\u003EIf you can handover a file that&rsquo;s name logically from a layering perspective (especially if you&rsquo;ve taken all the above steps too) then you&rsquo;ll find your Engineer(s) have a much easier time implementing the code as they can use it as their\r\nfile architecture or map.\u003C\u002Fp\u003E\u003Cp\u003EGroups should be given a name that characterises the contents. This is what can relate directly to an &lsquo;ID&rsquo; property or a &lsquo;Class&rsquo;. IDs by their very nature must be unique. In real life you can only have a single form of ID from\r\na single source, the same applies to code. You should use an ID once in your code and not again. If you find yourself repeating them then you should swap these to become classes instead.\u003C\u002Fp\u003E\u003Cp\u003EAn ID gives your particular Div or object a unique identifier which determines what makes it different. You could name a Nav Div, for example, \u003Ccode class=\"  language-text\"\u003ENAV\u003C\u002Fcode\u003E as you should only have one implementation of your core Navigation and reuse that component everywhere (more on this later). If that is true, ID it as \u003Ccode class=\"  language-text\"\u003ENAV\u003C\u002Fcode\u003E and apply the relevant classes.\u003C\u002Fp\u003E\u003Cp\u003ENotice the use of uppercase. Everyone has different practices, but one I think is particularly useful is to use UPPERCASE words to represent IDs and kebab-case for classes. But really you can do what you want. The reason for a difference? Scanability.\u003C\u002Fp\u003E\u003Ch3\u003EStyles == Classes\u003C\u002Fh3\u003E\u003Cp\u003ENow, in Figma, if you find yourself reusing a particular style everywhere then you&rsquo;ve probably decided (at least I hope so) to create a Figma Style from it. Doing this allows you to create local Text Styles, Color Styles and Effect Styles for a\r\ndocument. That way, repetition is more easy to do and consistency is more likely to be had.\u003C\u002Fp\u003E\u003Cp\u003EIn code we do this too, they&rsquo;re known as classes. Depending on whether you&rsquo;re using a CSS library (like \u003Ca href=\"https:\u002F\u002Ftailwindcss.com\u002F\" rel=\"noopener noreferrer\" target=\"_blank\"\u003ETailwindCSS\u003C\u002Fa\u003E) or not will likely determine your approach to classes. Tailwind uses what are known as &lsquo;\u003Ca href=\"https:\u002F\u002Fadamwathan.me\u002Fcss-utility-classes-and-separation-of-concerns\u002F\" rel=\"noopener noreferrer\" target=\"_blank\"\u003EUtility Classes\u003C\u002Fa\u003E&rsquo;, essentially breaking classes up into atomic parts (see: \u003Ca href=\"http:\u002F\u002Fatomicdesign.bradfrost.com\u002F\" rel=\"noopener noreferrer\" target=\"_blank\"\u003EAtomic Design\u003C\u002Fa\u003E). What this means in practice is, like in my example earlier, there&rsquo;s lots of bitty classes used to\r\nbuild up a base idea.\u003C\u002Fp\u003E\u003Cp\u003EJust look at this button: \u003Ccode class=\"  language-html\"\u003E&lt;button type=&quot;button&quot;class=&quot;flex flex-row w-full justify-center text-center font-medium btn btn-primary rounded-xl px-6 py-3 bg-blue-400 text-white hover:bg-blue-500 focus:outline-none focus:shadow-outline transition duration-500 ease&quot;&gt;Button 1\u003Cspan class=\"token tag\"\u003E\u003Cspan class=\"token tag\"\u003E\u003Cspan class=\"token punctuation\"\u003E&lt;\u002F\u003C\u002Fspan\u003Ebutton\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\u003Cp\u003EThat&rsquo;s a big ol&#39; lot of classes to get the button behaving how I want. But equally, it behaves how I want. I&rsquo;ve have complete control in the place I&rsquo;m creating the button, instead of relying on styling in a separate CSS file. And, once you learn the notation style, it actually gets pretty fast to write (see: \u003Ca href=\"https:\u002F\u002Fbrianlovin.com\u002Foverthought\u002Ftailwind-css-first-impressions\" rel=\"noopener noreferrer\" target=\"_blank\"\u003EBrian Lovin on migrating to TailwindCSS\u003C\u002Fa\u003E).\u003C\u002Fp\u003E\u003Cp\u003EThe next logical step, of course, is to reduce the amount you do this. And you do this, just like in Figma, through making reusable elements called Components.\u003C\u002Fp\u003E\u003Ch3\u003EComponents == Components\u003C\u002Fh3\u003E\u003Cp\u003ENow on to the final piece of the puzzle. You&rsquo;ve written a bunch of stuff, but you find yourself copying and pasting it all the time. Doesn&rsquo;t it seem silly to do that? Couldn&rsquo;t it be easier?\u003C\u002Fp\u003E\u003Cp\u003EThis is where component based design and development comes in. Breaking things up into reusable chunks makes it easier to manage a big build and increases consistency. The beauty of Components too, is that you can decide how atomic you want to make them.\r\nAtomic Design (mentioned earlier) is the extreme end of the spectrum, but if you&rsquo;re already using TailwindCSS then you&rsquo;ve already got a bunch of atomic elements to play with.\u003C\u002Fp\u003E\u003Cp\u003EIf I dissect my site, I have:\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli\u003EFour core unique pages\u003C\u002Fli\u003E\u003Cli\u003EOne subpage (for blog posts)\u003C\u002Fli\u003E\u003Cli\u003EFourteen components\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp\u003EI could be much more atomic with my components. If it was a commercial product, I would be, but the reality is that I don&rsquo;t need to be that strict about it. I&rsquo;m building it to my needs, just like I would a personal Figma file. The most important\r\npart of creating a component of anything is thinking about who&rsquo;s going to use it. Think of your website the same way you think of a Figma Design System. If you created icons with their labels as components, do the same, they&rsquo;ll be easier to\r\nswap out in a conditional statement. If you created different card component types, do the same, again you can use conditionals to control data differences.\u003C\u002Fp\u003E\u003Ch3\u003EConclusion\u003C\u002Fh3\u003E\u003Cp\u003EIf you&rsquo;re working with engineers on a project, talk it through with them. Ask them how they&rsquo;re planning to execute at a code level and build your project to match. If they&rsquo;re going atomic, go atomic. It&rsquo;ll feel tough in the beginning\r\nbut the 1:1 match will be worth it.\u003C\u002Fp\u003E\u003Cp\u003EMost importantly though, learn to make these connections in your head. If you can map what you think of in design to what the end engineering build case could be, you&rsquo;ll find that the process of documenting design decisions and handing over projects\r\nbecome far easier.\u003C\u002Fp\u003E",metadata:{published:"2020-12-18",snippet:"My personal approach on how to think about code from a design perspective and how to implement those changes.",tag:"Design",hero:{url:"https:\u002F\u002Fcdn.cosmicjs.com\u002Fabcadb20-424f-11eb-b5f1-77009cd6d567-379D08D9-5691-458E-9F06-DD368E10BEFC.png",imgix_url:"https:\u002F\u002Fimgix.cosmicjs.com\u002Fabcadb20-424f-11eb-b5f1-77009cd6d567-379D08D9-5691-458E-9F06-DD368E10BEFC.png"}},modified_at:"2020-12-21T16:42:48.927Z",order:"3",__typename:"Object"}}],fetch:[],mutations:[]});