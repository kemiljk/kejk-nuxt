__NUXT_JSONP__("/thoughts/code-as-design", {data:[{page:{title:"Code as Design",content:"\u003Ch3\u003EHow development can be learned through a design lens (and how I managed it)\u003C\u002Fh3\u003E\u003Cp\u003EI&rsquo;ve said it before, but I am primarily a designer. From an early age I was always drawing and building things, and always asking &ldquo;why?&rdquo;, I&rsquo;m naturally curious I guess. But I&rsquo;ve also explored frontend development from the\r\nearly years too.\u003C\u002Fp\u003E\u003Cp\u003EI grew up in what I now consider the golden age of the web. I was a pre-teen during the 90&rsquo;s and I got really into modding my Windows 98 and \u003Ca href=\"https:\u002F\u002Fwww.instructables.com\u002FCustom-Windows-UI\u002F\"\u003EXP\u003C\u002Fa\u003E interfaces to feel custom to my interests at the time (and let&rsquo;s not forget those \u003Ca href=\"https:\u002F\u002Fwinampheritage.com\u002Fskins\"\u003EWinamp skins\u003C\u002Fa\u003E). So I guess, although I wasn&rsquo;t coding at the time, I was beginning to appreciate the link between how the interface \u003Cem\u003Elooks\u003C\u002Fem\u003E and how it \u003Cem\u003Eworks\u003C\u002Fem\u003E.\u003C\u002Fp\u003E\u003Cp\u003EIn those days, you could do a minimal amount of work to change the appearance, but because you had to install a bunch of different patches and programs to make it work, it did require a reasonable amount of logic and computational literacy to get it working.\u003C\u002Fp\u003E\u003Cp\u003EAs I got older and things developed online, I got a \u003Ca href=\"www.myspace.com\"\u003EMySpace\u003C\u002Fa\u003E account and learnt about the power of HTML and inline styling of CSS. Using &ldquo;View Source&rdquo; I could steal the code other people wrote and modify it to my needs. Again, because I&rsquo;m visual-first, I started with hunting down the mods I liked the look of the most and then modified their code to suit what I liked. Starting with colours, I then worked my way into sizing and, hiding things I didn&rsquo;t like by targeting their \u003Ccode class=\" py-2  language-css\"\u003Eid\u003C\u002Fcode\u003E element and hiding them with \u003Ccode class=\" py-2  language-css\"\u003E\u003Cspan class=\"token property\"\u003Edisplay\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E:\u003C\u002Fspan\u003E none\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\u003Cp\u003EAfter MySpace went down the pan&mdash;before Justin Timberlake resurrected it and made it weird&mdash;and things moved on, I drifted away from code and moved more towards the creative side of things. But over the years I was exposed more and more to code through my jobs. And whilst working at \u003Ca href=\"www.cognite.co\"\u003ECognite\u003C\u002Fa\u003E I was fortunate to meet a good friend, \u003Ca href=\"www.nick-wilkins.com\"\u003ENick Wilkins\u003C\u002Fa\u003E, who helped me (and still does) figure a bunch of things out to make me more comfortable with code. More about that here \u003Ca href=\"https:\u002F\u002Fwww.kejk.tech\u002Fthoughts\u002Fdesigning-in-code\"\u003EDesign as Code\u003C\u002Fa\u003E .\u003C\u002Fp\u003E\u003Ch3\u003EBack to code\u003C\u002Fh3\u003E\u003Cp\u003ESince then, I&rsquo;ve been pushing myself to learn more and more about how to implement my design ideas in code. I started by pushing myself to write my \u003Ca href=\"https:\u002F\u002Fkejk.vercel.app\"\u003Eoriginal personal website\u003C\u002Fa\u003E in pure HTML and CSS. It was clean and simple, but it did the job and refreshed my knowledge. Looking back at it now, it&rsquo;s not that far off where I am now visually, but it&rsquo;s a much more stripped back approach and a far more manual site to update.\u003C\u002Fp\u003E\u003Cp\u003EThe funny thing is, I didn&rsquo;t design this page first. Contrary to the usual approach, I wanted to leverage something I&rsquo;ve talked about before \u003Ca href=\"https:\u002F\u002Fwww.kejk.tech\u002Fthoughts\u002Fdesigning-in-code\"\u003EDevelopment-based Design\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003Cblockquote\u003E\u003Cp\u003EI&rsquo;m not saying you should go away completely from using design tools (I still heavily use Adobe XD and Figma), but I am saying that understanding how to design in code is a superpower that all digital designers should aim to possess.\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\u003Cp\u003EBy manipulating everything in the browser as I went, I learned even more about the power of code, but it felt like something was missing for me. I wanted to find a way to learn the more reactive programming approaches. There&rsquo;d been all this talk about \u003Ca href=\"www.reactjs.org\"\u003EReact\u003C\u002Fa\u003E and it just seemed like a really good thing for me to push towards. But then I looked at it&hellip;\u003C\u002Fp\u003E\u003Ch3\u003EThe problem with React and why I picked Vue\u003C\u002Fh3\u003E\u003Cp\u003EFor me, React just didn&rsquo;t properly click. For developers who understand Javascript it offers really powerful ways to build better, more reactive websites. But as a designer who moved into learning code, it was too hard for me to actually make sense\r\nof. The leap from HTML and CSS to React was massive and it put me off.\u003C\u002Fp\u003E\u003Cp\u003EWelcome \u003Ca href=\"https:\u002F\u002Fvuejs.org\"\u003EVue\u003C\u002Fa\u003E! I stumbled across Vue by accident. I knew I wanted to learn something more reactive so I started searching around, found Vue and it just clicked instantly. I dropped the CDN script into a prototype project I was working on at \u003Ca href=\"www.neuerenergy.com\"\u003ENeuerEnergy\u003C\u002Fa\u003E and I was away. I could write the HTML and CSS I knew, and then inject some Javascript in&mdash;when I wanted to and had learned to&mdash;to power up the site with clever reactivity.\u003C\u002Fp\u003E\u003Cp\u003ESo then my love of Vue began and I decided the best way to learn it better was to rebuild my personal website in Vue. So welcome \u003Ca href=\"https:\u002F\u002Fkejk.kejk.now.sh\"\u003EKEJK v2\u003C\u002Fa\u003E. I decided that because we&rsquo;d been leveraging the power of Material Design at NeuerEnergy, I wanted to do the same for my personal website (avoiding too much brain overload) and thus found the \u003Ca href=\"https:\u002F\u002Fvuetifyjs.com\u002Fen\u002F\"\u003EVuetify library\u003C\u002Fa\u003E to help me on my journey. This meant I could build in the same way I could design, using a design framework that already made sense to me. If I wanted a card, Vuetify had a \u003Ccode class=\" py-2  language-html\"\u003E\u003Cspan class=\"token tag\"\u003E\u003Cspan class=\"token tag\"\u003E\u003Cspan class=\"token punctuation\"\u003E&lt;\u003C\u002Fspan\u003Ev-card\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E to offer me, if I wanted to break into a grid, I had \u003Ccode class=\" py-2  language-html\"\u003E\u003Cspan class=\"token tag\"\u003E\u003Cspan class=\"token tag\"\u003E\u003Cspan class=\"token punctuation\"\u003E&lt;\u003C\u002Fspan\u003Ev-row\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E and \u003Cspan class=\"token tag\"\u003E\u003Cspan class=\"token tag\"\u003E\u003Cspan class=\"token punctuation\"\u003E&lt;\u003C\u002Fspan\u003Ev-col\u003C\u002Fspan\u003E\u003Cspan class=\"token punctuation\"\u003E&gt;\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fcode\u003Eto\r\nhelp me out. It all just made sense.\u003C\u002Fp\u003E\u003Ch3\u003EVue, Nuxt, Cosmic, Drafts and TailwindCSS\u003C\u002Fh3\u003E\u003Cp\u003EI loved that personal site, it also provided me with a lot of interest from prospective employers when applying for other design roles. Being able to tell them that I&rsquo;d built the website myself and used Vue to do so gave me a level of skill that other designers weren&rsquo;t always able to offer. This doesn&rsquo;t mean I was \u003Cem\u003Ebetter\u003C\u002Fem\u003E in any way, I just offered \u003Cem\u003Edifferent\u003C\u002Fem\u003E skills and sometimes those skills are super helpful for the right design team.\u003C\u002Fp\u003E\u003Cp\u003EI found that exact design team. In my current role at \u003Ca href=\"www.homehero.co.uk\"\u003EHomeHero\u003C\u002Fa\u003E, I was hired specifically because I could span the breadth of design and development. Connecting Design and Engineering teams is often an overwhelming and complex task. More often than not, projects aren&rsquo;t handed over properly and a lot of important information is either lost in translation or just straight up missed. Usually, this isn&rsquo;t the fault of anyone particularly, better processes could help (I&rsquo;ll be writing about this at some point soon) but also understanding the language of development and being able to understand \u003Cstrong\u003Ewhat it takes\u003C\u002Fstrong\u003E to deliver on your grand &ldquo;cross-device isometric animated timeline&rdquo; can have a massive, lasting impact on the connectedness of your team and the quality of the outcome. Moreover, I&rsquo;m able to work directly with the Engineering team to style the frontend of some of our projects, lifting a weight off of them and giving Design the power to own the interface from idea to execution.\u003C\u002Fp\u003E\u003Cp\u003ESo what was next for me? Well, as you can see there were two iterations of my previous site but you&rsquo;re reading this on the third. I realised that I had an opportunity to improve things. I wanted to make my content more reactive and allow myself more opportunities to utilise a headless CMS to power a lot of the content that could change regularly. This is when I came across \u003Ca href=\"www.cosmicjs.com\"\u003ECosmicJS\u003C\u002Fa\u003E. Cosmic is a super flexible, \u003Cstrong\u003Ereally well documented\u003C\u002Fstrong\u003E headless CMS (with an unbelievably generous free tier). Cosmic has allowed me to power pages such as my \u003Ca href=\"www.kejk.tech\u002Fthoughts\"\u003EThoughts\u003C\u002Fa\u003E (where you&rsquo;re reading this) and \u003Ca href=\"www.kejk.tech\u002Fuses\"\u003EUses\u003C\u002Fa\u003E. Now I can update content via Cosmic&rsquo;s\r\nsimple backend, avoiding any need to dive into the code to create a new blog post or update my gear.\u003C\u002Fp\u003E\u003Cp\u003ERight now, I&rsquo;m writing this on \u003Ca href=\"www.getdrafts.com\"\u003EDrafts\u003C\u002Fa\u003E for iPad and will be posting it to my Cosmic bucket using a custom \u003Ca href=\"https:\u002F\u002Factions.getdrafts.com\u002Fa\u002F1fP\"\u003EPOST action\u003C\u002Fa\u003E I wrote. This makes things frictionless for me now.\u003C\u002Fp\u003E\u003Cp\u003EI&rsquo;ve also refactored the site to use \u003Ca href=\"www.nuxtjs.org\"\u003ENuxt.js\u003C\u002Fa\u003E so I can take better advantage of dynamic page routing, SEO meta info and their module system. I even went as far as to ditch my use of Material Design and refactored all of the HTML to use \u003Ca href=\"www.tailwindcss.com\"\u003ETailwindCSS\u003C\u002Fa\u003E. This means I&rsquo;m looking up docs less and focusing on writing code in a way my brain already thinks&hellip; in CSS.\u003C\u002Fp\u003E\u003Ch3\u003ESo what&rsquo;s the future?\u003C\u002Fh3\u003E\u003Cp\u003EI&rsquo;m not really sure where I go next with things. I can probably better implement Cosmic into my site, making more content dynamic. I also want to write some more Drafts actions to try and make things like updating a post more straightforward. But\r\nother than that, I&rsquo;m feeling really excited about where things are and what I&rsquo;ve managed to teach myself.\u003C\u002Fp\u003E\u003Cp\u003EI&rsquo;ve said it before several times, but I urge you if you&rsquo;re a designer who&rsquo;s working with developers; learn the basics of HTML, CSS and Javascript, try out a framework like Vue + Nuxt (give SwiftUI a try too). They&rsquo;re all becoming\r\nso much more accessible to people without programming knowledge already (or a more visually-focused brain like me) and I promise it&rsquo;ll be worth it.\u003C\u002Fp\u003E\u003Cp\u003EIf I can do it, so can you.\u003C\u002Fp\u003E",metadata:{published:"2020-12-10",snippet:"How development can be learned through a design lens (and how I've managed to do it). ",tag:"development",hero:{url:"https:\u002F\u002Fcdn.cosmicjs.com\u002F0f334900-b581-11eb-b5b6-fd115d17c053-Code-as-Design2x.png",imgix_url:"https:\u002F\u002Fimgix.cosmicjs.com\u002F0f334900-b581-11eb-b5b6-fd115d17c053-Code-as-Design2x.png"},latest:false},modified_at:"2021-12-21T13:43:30.500Z",order:"18",__typename:"Object"}}],fetch:[],mutations:[]});