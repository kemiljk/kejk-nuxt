__NUXT_JSONP__("/thoughts/design-for-handshakes-not-handovers", {data:[{page:{title:"Design for handshakes not handovers",content:"\u003Ch2 class=\"text-2xl\"\u003EWhy it&rsquo;s better to shake hands with your developers, than throw your designs over the fence.\u003C\u002Fh2\u003E\u003Cp\u003EIf you&rsquo;ve followed me for any length of time, you&rsquo;ll know that I&rsquo;m really bullish on the notion that practitioners of a craft should be able to understand the core principles of their neighbouring crafts in order to produce the best\r\noutcomes.\u003C\u002Fp\u003E\u003Cp\u003ETo put that in more clear terms, a designer should \u003Cem\u003Eunderstand\u003C\u002Fem\u003E how their designs are built for their end platform but they don&rsquo;t necessarily have to be able to implement it themselves. Understanding the core principles and basic architecture of the platform you&rsquo;re creating for gives your team the best chance of great outcomes.\u003C\u002Fp\u003E\u003Cp\u003EFor the sake of this post, I&rsquo;ll focus on my craft as a designer but you can apply this more broadly to any role. We all have adjacent teams and roles that are impacted directly by our work so understanding them at their core is essential.\u003C\u002Fp\u003E\u003Cp\u003EOne of the first things I ever built and shipped was my initial Figma plugin (then called Px&rsaquo;&rsaquo;Em and now \u003Ca href=\"https:\u002F\u002Fwww.figma.com\u002Fcommunity\u002Fplugin\u002F837070613195594890\"\u003EHand&rsaquo;&rsaquo;over\u003C\u002Fa\u003E). The original intention of that plugin was to make it easy to convert Figma design pixels into ems. I later upgraded this to be rem focused so that you could adjust your baseline pixel value and added more canvas detection features. This then evolved into a Mac, iOS and iPadOS \u003Ca href=\"https:\u002F\u002Fapps.apple.com\u002Fus\u002Fapp\u002Fid1518887590\"\u003Eapp\u003C\u002Fa\u003Ebecause\r\nI wanted to use it for myself and because I fancied learning SwiftUI.\u003C\u002Fp\u003E\u003Cp\u003EBut now I&rsquo;m wondering if the name is right&hellip;\u003C\u002Fp\u003E\u003Cp\u003EI&rsquo;ve come to realise through my time across multiple startups, moving between design-only and design-engineering hybrid roles that a design is never really handed over. The physical files may be sent via a link or exported and shipped, but the learning\r\nand conversation, the heated debates on delivery, the nitpicking over alignment doesn&rsquo;t stop. And as such, the handover never actually happened.\u003C\u002Fp\u003E\u003Cblockquote\u003E\u003Cp\u003EHandover implies responsibility is passed on. Handshake implies responsibility is shared.\u003C\u002Fp\u003E\u003C\u002Fblockquote\u003E\u003Cp\u003EIn retrospect, the handover only really happens when it reaches the customer and even then, if you&rsquo;re working in the right way, you iterate and learn, and then subsequently evolve the project further. Rinse and repeat. Handover never happened.\u003C\u002Fp\u003E\u003Cp\u003EWorking with designers at different stages in their careers and different levels of engineering knowledge, it becomes evident that for some, handing over offers a relief. A way to move responsibility off of their shoulders and onto someone else&rsquo;s.\r\nOr to feel that their job is done and now it&rsquo;s time to move on to the next thing. As such a handover implies responsibility is passed on, a handshake however, implies responsibility is shared.\u003C\u002Fp\u003E\u003Cp\u003EIn fast paced environments, this is certainly often true. But the best teams work like an organism, harmonious in form and consistently sharing resources and forever communicating. In an environment like that, hard handovers can&rsquo;t ever truly happen.\u003C\u002Fp\u003E\u003Cp\u003ETo give another practical example. If an engineer was delivering a feature but hit a stopping point because something was missing from the original designs, should they a) stop work entirely, hand it back to the designer and wait? Or b) raise the issue\r\nwith the designer, work to reach a conclusion together, and then carry on?\u003C\u002Fp\u003E\u003Cp\u003EI&rsquo;m guessing we&rsquo;d all pick B. Well, that sounds an awful lot more like a handshake to me. An agreement, a shared understanding, teamwork, partnership.\u003C\u002Fp\u003E\u003Ch3\u003ESo how do you design for Handshakes?\u003C\u002Fh3\u003E\u003Cp\u003EThere&rsquo;s five key points that really lead to great handshakes.\u003C\u002Fp\u003E\u003Col\u003E\u003Cli\u003EInvolve your developers early and often\u003C\u002Fli\u003E\u003Cli\u003EShare ideas\u003C\u002Fli\u003E\u003Cli\u003EDesign together\u003C\u002Fli\u003E\u003Cli\u003EKeep connected\u003C\u002Fli\u003E\u003Cli\u003EDevelop a bondï¿¼\u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Ch3\u003E1. Involve your developers early and often\u003C\u002Fh3\u003E\u003Cp\u003EGreat teams work together throughout the course of a project. Rather than relying on finite touch points, they focus on passing the baton whilst continuing to run alongside their team mates, ready to take the baton again when their time comes.\u003C\u002Fp\u003E\u003Cp\u003EThe earlier and more often you involve developers in your process, the less likely designs are to be handed over and become undeliverable or need iterating.\u003C\u002Fp\u003E\u003Cp\u003EWhen you&rsquo;re ready to handshake, grab your developer and walk through the codable iteration of your work. Pass on the files and keep in constant communication as the project develops.\u003C\u002Fp\u003E\u003Ch3\u003E2. Share ideas\u003C\u002Fh3\u003E\u003Cp\u003EBe open to sharing developer thoughts and ideas. Design isn&rsquo;t about gatekeeping so welcome a collaborative and open atmosphere, and let your developer challenge you during the entire process. The more you share, the more you understand each other\r\nand the more you&rsquo;ll be able to riff off each other to get to the best result.\u003C\u002Fp\u003E\u003Cp\u003EIf you foster a good enough bond here, you may even be able to be less specific in certain design processes as your developer will know how you think (and visa versa) and as such, can make valid assumptions.\u003C\u002Fp\u003E\u003Cp\u003EEqually, you&rsquo;ll develop a better understanding of how your product actually works, and as such, learn to make better decisions initially before agreeing on final designs.\u003C\u002Fp\u003E\u003Ch3\u003E3. Design together\u003C\u002Fh3\u003E\u003Cp\u003EThis collaborative space should invite co-designing. I challenge you to invite a developer into your file as you work, talk at the same time, design in real time. Getting comfortable with live designing will make a world of difference. You won&rsquo;t\r\nget your deepest work done, but you&rsquo;ll ensure the designs are developer friendly from the get go.\u003C\u002Fp\u003E\u003Cp\u003EInvite questions. Invite challenges. Challenge them back. Think of this as your safe place to thrash ideas out.\u003C\u002Fp\u003E\u003Ch3\u003E4. Keep connected\u003C\u002Fh3\u003E\u003Cp\u003EOnce your designs are feeling ready to go, don&rsquo;t lose that connection. Whether you have regular stand ups, async chats, or use Loom to share progress, make sure you stay connected.\u003C\u002Fp\u003E\u003Cp\u003EAs the designer it&rsquo;s your responsibility to encourage this and foster it within your developer. If you want to handshake rather than handover, own this part of the process.\u003C\u002Fp\u003E\u003Ch3\u003E5. Develop a bond\u003C\u002Fh3\u003E\u003Cp\u003EIn the end, you should evolve a stronger bond with your developer. This will make a big difference in the long term as they&rsquo;ll feel safer with sharing honest feedback, they&rsquo;ll make better default assumptions or decisions and they&rsquo;ll\r\nwelcome the idea of working with you again.\u003C\u002Fp\u003E\u003Cp\u003EThis bond is one of the most important in a software development business because it ensures that what ships to customers is the best it can possibly be. Providing the idea is the right one, this execution phase is critical to success so if you can nail\r\nthis process, you can be confident in the outcomes.\u003C\u002Fp\u003E\u003Ch3\u003EFinding the nuance\u003C\u002Fh3\u003E\u003Cp\u003EIt&rsquo;s all well and good for me to say that handovers aren&rsquo;t right. This is merely my belief based on working with handshakes for most of my design career. Understanding how the development process works develops a deeper empathy for the difficulties\r\nthese days to do with responsiveness, unpredictable screen sizes, data rates, device themes, accessibility settings and more. There&rsquo;s so much to contend with, and building these great partnerships rather than transactions will leave your product\r\nfeeling better than it ever did.\u003C\u002Fp\u003E\u003Cp\u003EMake sure you share your process with your teams too. Be the leader of the handshake within your organisation and upskill other designers, developers and anyone else in the business on this collaborative process.\u003C\u002Fp\u003E\u003Cp\u003EIf you end up trying this handshake approach, let me know how you get on. I&rsquo;d love to hear about it.\u003C\u002Fp\u003E\u003Ch3\u003EFurther reading\u003C\u002Fh3\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fmaterial.io\u002Fblog\u002Fdesigntocode\" rel=\"noopener noreferrer\" target=\"_blank\"\u003ETurning Handoffs into High-Fives\u003C\u002Fa\u003E\u003C\u002Fp\u003E",metadata:{hero:{url:"https:\u002F\u002Fcdn.cosmicjs.com\u002Fce4e34c0-855c-11ec-8e12-4f611a7927fa-Design-for-handshakes-not-handovers2x.png",imgix_url:"https:\u002F\u002Fimgix.cosmicjs.com\u002Fce4e34c0-855c-11ec-8e12-4f611a7927fa-Design-for-handshakes-not-handovers2x.png"},published:"2022-02-04",snippet:"Why it's better to shake hands with your developers, than throw your designs over the fence",tag:"design"},modified_at:"2022-02-14T08:49:49.486Z",order:"1",__typename:"Object"}}],fetch:[],mutations:[]});